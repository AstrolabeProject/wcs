plugins {
  id 'c'
  id 'java-library'
  id 'maven'
}

repositories {
  jcenter()
  mavenLocal()
  mavenCentral()
}

sourceCompatibility = 1.8

version = '2.1'

dependencies {
  implementation 'org.apache.logging.log4j:log4j-core:2.12.0'
  implementation 'org.apache.logging.log4j:log4j-api:2.12.0'
  implementation 'org.opencadc:cadc-util:[1.2.14,)'
  testCompile 'junit:junit:4.+'
}

model {
  repositories {
    libs(PrebuiltLibraries) {
      wcsx {
        // headers.srcDir '/usr/include/wcslib'  // Linux
        headers.srcDir "/usr/local/include/wcslib"
        binaries.withType(SharedLibraryBinary) {
          // sharedLibraryFile = file('/usr/local/lib/libwcs.so') // Linux
          sharedLibraryFile = file('/usr/local/lib/libwcs.dylib')
        }
      }
    }
  }

  components {
    wcsLibJNI(NativeLibrarySpec) {

      sources {
        c {
          lib library: 'wcsx'
        }
      }

      binaries.all {
        if (targetPlatform.operatingSystem.macOsX) {
          cCompiler.args '-I', "${org.gradle.internal.jvm.Jvm.current().javaHome}/include"
          cCompiler.args '-I', "${org.gradle.internal.jvm.Jvm.current().javaHome}/include/darwin"
          cCompiler.args '-mmacosx-version-min=10.4'
          linker.args '-mmacosx-version-min=10.4'
        } else if (targetPlatform.operatingSystem.linux) {
          cCompiler.args '-I', "${org.gradle.internal.jvm.Jvm.current().javaHome}/include"
          cCompiler.args '-I', "${org.gradle.internal.jvm.Jvm.current().javaHome}/include/linux"
          cCompiler.args '-D_FILE_OFFSET_BITS=64'
        }

        cCompiler.args '-fexceptions',
          '-dylib',
          '-ansi',
          '-std=c99',
          '-pedantic',
          '-Wall',
          '-Wno-parentheses',
          '-Wno-long-long',
          '-Wimplicit',
          '-DBUILD_SHARED_LIBS=OFF',
          '-D_REENTRANT',
          '-DCOMPILE_STYLE=ANSI_C_COMPILE',
          '-DCOMPILER_gnu',
          '-Dx86_linux',
          '-D_POSIX_C_SOURCE=2'
      }
    }
  }
} // model

task wcsJar(type:Jar) {
  manifest {
    attributes('Project-Title': project.name,
               'Project-Version': project.version)
  }
  from(sourceSets.main.output)
  from(sourceSets.test.output)
  from('build/libs/wcsLibJNI/shared/libwcsLibJNI.dylib')
  dependsOn build
}
